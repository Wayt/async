// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

/*
Package worker is a generated protocol buffer package.

It is generated from these files:
	worker.proto

It has these top-level messages:
	InfoRequest
	InfoReply
	ExecRequest
	ExecReply
*/
package worker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Worker information request
type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Worker information reply
type InfoReply struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Version      string   `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	MaxParallel  int32    `protobuf:"varint,3,opt,name=max_parallel,json=maxParallel" json:"max_parallel,omitempty"`
	Capabilities []string `protobuf:"bytes,4,rep,name=capabilities" json:"capabilities,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InfoReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InfoReply) GetMaxParallel() int32 {
	if m != nil {
		return m.MaxParallel
	}
	return 0
}

func (m *InfoReply) GetCapabilities() []string {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Worker execution request
type ExecRequest struct {
	Function string               `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	Args     *google_protobuf.Any `protobuf:"bytes,2,opt,name=args" json:"args,omitempty"`
	Data     *google_protobuf.Any `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExecRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ExecRequest) GetArgs() *google_protobuf.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ExecRequest) GetData() *google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// Worker execution reply
type ExecReply struct {
}

func (m *ExecReply) Reset()                    { *m = ExecReply{} }
func (m *ExecReply) String() string            { return proto.CompactTextString(m) }
func (*ExecReply) ProtoMessage()               {}
func (*ExecReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*InfoRequest)(nil), "worker.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "worker.InfoReply")
	proto.RegisterType((*ExecRequest)(nil), "worker.ExecRequest")
	proto.RegisterType((*ExecReply)(nil), "worker.ExecReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Worker service

type WorkerClient interface {
	// Request client informations
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecReply, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/worker.Worker/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecReply, error) {
	out := new(ExecReply)
	err := grpc.Invoke(ctx, "/worker.Worker/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	// Request client informations
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	Exec(context.Context, *ExecRequest) (*ExecReply, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Worker_Info_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Worker_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0xbf, 0x4f, 0x84, 0x30,
	0x18, 0xbd, 0xe3, 0x10, 0xe5, 0x03, 0x4d, 0xac, 0x0e, 0xc8, 0x84, 0x9d, 0x98, 0x38, 0x73, 0xfe,
	0x05, 0x0e, 0x0e, 0x6e, 0x86, 0xc5, 0xd1, 0x14, 0x28, 0xa4, 0xb1, 0x47, 0x6b, 0x01, 0x85, 0x44,
	0xff, 0x77, 0xd3, 0x96, 0xfb, 0x35, 0x38, 0xbe, 0x97, 0xf7, 0x7d, 0xef, 0x07, 0x84, 0xdf, 0x42,
	0x7d, 0x50, 0x95, 0x49, 0x25, 0x7a, 0x81, 0x3c, 0x8b, 0xe2, 0xbb, 0x46, 0x88, 0x86, 0xd3, 0xb5,
	0x61, 0x8b, 0xa1, 0x5e, 0x93, 0x76, 0xb2, 0x12, 0x7c, 0x09, 0xc1, 0x4b, 0x5b, 0x8b, 0x9c, 0x7e,
	0x0e, 0xb4, 0xeb, 0xf1, 0x0f, 0xf8, 0x16, 0x4a, 0x3e, 0xa1, 0x2b, 0x70, 0x58, 0x15, 0x2d, 0x93,
	0x65, 0xea, 0xe7, 0x0e, 0xab, 0x50, 0x04, 0xe7, 0x5f, 0x54, 0x75, 0x4c, 0xb4, 0x91, 0x63, 0xc8,
	0x1d, 0x44, 0xf7, 0x10, 0x6e, 0xc9, 0xf8, 0x2e, 0x89, 0x22, 0x9c, 0x53, 0x1e, 0xad, 0x92, 0x65,
	0x7a, 0x96, 0x07, 0x5b, 0x32, 0xbe, 0xce, 0x14, 0xc2, 0x10, 0x96, 0x44, 0x92, 0x82, 0x71, 0xd6,
	0x33, 0xda, 0x45, 0x6e, 0xb2, 0x4a, 0xfd, 0xfc, 0x84, 0xc3, 0xbf, 0x10, 0x3c, 0x8f, 0xb4, 0x9c,
	0xc3, 0xa0, 0x18, 0x2e, 0xea, 0xa1, 0x2d, 0x7b, 0x6d, 0x68, 0x53, 0xec, 0x31, 0x4a, 0xc1, 0x25,
	0xaa, 0xe9, 0x4c, 0x90, 0x60, 0x73, 0x9b, 0xd9, 0x86, 0xd9, 0xae, 0x61, 0xf6, 0xd4, 0x4e, 0xb9,
	0x51, 0x68, 0x65, 0x45, 0x7a, 0x62, 0x32, 0xfd, 0xab, 0xd4, 0x0a, 0x1c, 0x80, 0x6f, 0xed, 0x25,
	0x9f, 0x36, 0x1c, 0xbc, 0x37, 0xb3, 0x1e, 0x7a, 0x00, 0x57, 0x6f, 0x82, 0x6e, 0xb2, 0x79, 0xdc,
	0xa3, 0xc1, 0xe2, 0xeb, 0x53, 0x52, 0xf2, 0x09, 0x2f, 0xf4, 0x85, 0x7e, 0x74, 0xb8, 0x38, 0x6a,
	0x75, 0xb8, 0xd8, 0x7b, 0xe1, 0x45, 0xe1, 0x99, 0x38, 0x8f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x34, 0x09, 0x49, 0xb9, 0xc0, 0x01, 0x00, 0x00,
}
